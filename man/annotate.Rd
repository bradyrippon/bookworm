% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/annotate.R, R/temp.R
\name{annotate}
\alias{annotate}
\title{Apply a YAML codebook to a data frame (labels, values, basic metadata)}
\usage{
annotate(
  data,
  path,
  values = c("none", "overwrite", "new"),
  values_tag = "_factor",
  mismatch = "warn",
  normalize_codes = TRUE,
  case = c("lower", "upper", "asis"),
  apply_meta = TRUE
)

annotate(
  data,
  path,
  values = c("none", "overwrite", "new"),
  values_tag = "_factor",
  mismatch = "warn",
  normalize_codes = TRUE,
  case = c("lower", "upper", "asis"),
  apply_meta = TRUE
)
}
\arguments{
\item{data}{A data.frame/tibble to annotate.}

\item{path}{File path to a YAML codebook \strong{or} a preloaded YAML list
(e.g., the result of \code{yaml::read_yaml()}).}

\item{values}{One of "none","overwrite","new"; how to handle value maps.}

\item{values_tag}{Suffix used when \code{values = "new"}.}

\item{mismatch}{Either a single policy for all scopes — one of
"ignore","warn","error" — or a named list/character vector with any of
\code{vars}, \code{codes}, \code{meta} set individually, e.g.
\code{list(vars="warn", codes="error", meta="ignore")}.}

\item{normalize_codes}{Logical; trim whitespace and case-fold before matching codes to \code{values}.}

\item{case}{One of "lower","upper","asis" for code matching when \code{normalize_codes = TRUE}.}

\item{apply_meta}{Logical; apply \code{meta$missing_codes}, \code{meta$levels_order}, \code{meta$reference_level},
and simple type coercion from \code{meta$type}.}

\item{warn_missing}{Logical; warn when metadata vars aren’t in \code{data}.}

\item{strict}{How to handle data codes not found in YAML \code{values}:
"ignore" (default), "warn", or "error".}
}
\value{
Original data frame with labels attached

The annotated \code{data} (attributes \code{codebook_source}, \code{codebook_path}, \code{bookworm_version}).
}
\description{
Reads a YAML codebook and applies it to a data frame: variable labels,
value maps (as factors), and simple meta (missing codes, factor order,
reference level, type coercion). \code{path} can be a file path \strong{or} a
preloaded YAML object (a list).
}
\examples{
\dontrun{
path <- system.file("extdata", "codebook.yaml", package = "bookworm")

df <- data.frame(
  age = c(23, 25, 42, 38, 29),
  gender = c(1, 2, 1, 1, 2),
  education = c(2, 3, 3, 5, 4),
  diabetes = c("Ngt", "Ngt", "2", "1", "Ngt")
)

labels <- df |> annotate(path, values = "overwrite")
}
}
